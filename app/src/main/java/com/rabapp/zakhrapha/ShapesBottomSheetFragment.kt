package com.rabapp.zakhrapha

import android.content.ClipData
import android.content.ClipboardManager
import android.content.Context
import android.os.Bundle
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.ImageView
import android.widget.TextView
import android.widget.Toast
import androidx.appcompat.app.AlertDialog
import androidx.coordinatorlayout.widget.CoordinatorLayout
import androidx.lifecycle.ViewModelProvider
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.android.material.bottomsheet.BottomSheetBehavior
import com.google.android.material.bottomsheet.BottomSheetDialog
import com.google.android.material.bottomsheet.BottomSheetDialogFragment

class ShapesBottomSheetFragment : BottomSheetDialogFragment() {
    private lateinit var arrMenuName: List<String>
    private lateinit var categoryMap: Map<String, List<String>>
    private lateinit var favoriteViewModel: HistoryViewModel

    private val arrAngry = listOf(
        "(‚©∫_‚©π)", "‡ºΩ‚ó∫_‚óø‡ºº", "(‚ó£_‚ó¢)", "(¬¨‚ñÇ¬¨)", "(Îàà_Îàà)", "(¬¨ÔΩ§¬¨)", "(`A¬¥)", "(‚∏Ö‚∏ü‚∏Ñ)", "(‚©∫Ô∏∑‚©π)",
        "‚ñΩ–¥‚ñΩÔºâ", "-`–¥¬¥-", "(‚ÄôÁõä‚Äô)", "(‚ãã‚ñÇ‚ãå)", "„Ä¥‚ãã_‚ãå„Äµ", "„ÉΩ(ÔΩè`Áöø‚Ä≤ÔΩè)Ôæâ", "·ïô( Ô∏°‚ÄôÔ∏°Áõä‚ÄôÔ∏†)‡∏á",
        "(‚ó£_(‚ó£_(‚ó£_‚ó¢)_‚ó¢)_‚ó¢)", "Ÿ© (‚ï¨ òÁõä ò‚ï¨) €∂", "( ‡∏á `œâ¬¥ )€∂", "€π( √í€Å√ì )€∂", "(‚ï¨‚âñ_‚âñ)",
        "‡≠ß‡ºº ‡≤†Áõä‡≤† ‡ºΩ‡≠®", "(ÔΩÄ–¥¬¥)„Çù", "‚∏®‚ó∫_‚óø‚∏©", "(‚¶©_‚¶®)", "-(`‡∑¥¬¥)-", "‚îó(ÔΩÄo ¬¥)‚îì", "Íí∞ÔΩ°‚Ä¢`ÔΩ™¬¥‚Ä¢ÔΩ°Íí±€∂"
    )

    private val arrBadMood = listOf(
        "(‚èï)", "(‚ñ™‚Äó‚ñ™)", "(·ïµÔπè·ï¥)", "(Àë‚Ä¶Àë)", "=(Àë‚ÄóÀë)=", "(·ïò‚∏ü·ïö)", "(‚∏Ö‚∏ü‚∏Ñ)", "(‚ä≥‚Ä¶‚ä≤)", "(‚ÅçÔπè‚Åå)",
        "(~_~)", "(‚ü¢Ôπè‚ü£)", "ÔºàÔºû_ÔºúÔºâ", "(√≤‚Äó√≥)", "(√≤‚Ä¶√≥)", "(–§_–§)", "(·ñõ‚Äó·ñú)", "·ï¥ÔΩ∞·¥•ÔΩ∞·ïµ", "‡ºΩ‚ó∫_‚óø‡ºº", "Œ®(`_¬¥ # )‚Üù", "‚òú(`o¬¥)"
    )

    private val arrBear = listOf(
        " ï‚ÅÄ·¥•‚ÅÄ î", "„Éª„â®„Éª", "·µî·¥•·µî", " ï‚Ä¢·¥•‚Ä¢ î", " ï¬∑·¥•¬∑ î", "ÀÅÀôÀüÀôÀÄ", "‚ùÉ·Ç£·Ñé·Ç£‚ùÉ", " ï·µî·¥•·µî î", " ï·µï·¥•·µï î",
        " ¢·µïÔπè·µï °", " ïÔø´·¥•Ôø© î", "(‡πè„â®‡πè)", "(√≥„â®√≤)", " ¢·µï·¥ó·µï °", " ï‚óâ·¥•‚óâ î", " ï„Éª„â®„Éª î", " ï‚âß·¥•‚â¶ î",
        " ï‚Ä¢„â®‚Ä¢ î", "x ï‚âß·¥•‚â¶ îx", "(‚ú™„â®‚ú™)", " ï‚àô·É≤‚àô î", " ï Ω…û º î", "[‚óâ„â®‚óâ]", " ï¬∫·¥•¬∫ î", " ï·µî„â®·µî î", " ï*·¥ó* î",
        " ï‚Ä¢‚äñ‚Ä¢ î", " ï·µí·¥•·µí î", " ï‚Ä¢·¥ó‚Ä¢ î", " ï‚ÅÄ„â®‚ÅÄ î"
    )

    private val arrBeg = listOf(
        "(‰∫∫Ôæü ‚àÄÔæü)", "( uœâu‰∫∫ )", "‰∫∫‚ç≤‚Äø‚ç≤‰∫∫", "(¬∫‰∫∫¬∫)", "(„ÜÜ_„ÜÜ)", "(„ÜÜÔπè„ÜÜ)êÑø", "(ÀáêêøÀá)", "·≠•(¬∫‡∑¥¬∫)êÉ≥",
        "(ÔºæêãÑÔºæ)", "(·µïÔπè·µï)", "(‚äôÔπè‚äô)", "·≠•(‚äôÔ∏∑‚äô)êÉ∑", "(–§Ôπè–§)", "(‚∏å‰∫∫‚∏ç)", "(‚∏åÔπè‚∏ç)", "(^‰∫∫^)", "(‚äô‰∫∫‚äô)",
        "Ôºà√ó√∑√óÔºâ‰∫∫", "(„ÜÜÔΩû„ÜÜ)", "(·µï‰∫∫·µï)", "(‚ãÜÔπè‚ãÜ)", "Ôºà¬¥–îÔΩÄ‰∫∫Ôºâ", "( ‰∫∫„Çù–¥‚à© )", "‡ºº„Å§ ‚óï_‚óï ‡ºΩ„Å§", "(ÔΩ•œâÔΩ•)êÉ≥",
        "(ÔΩ•‚è†ÔΩ•)", "(‚™©Ôπè‚™®)", "Ôºà‚óã¬¥ŒîÔΩÄ‰∫∫Ôºâ", "(‰∫∫ŒµÔæü ‚óè)", "(‚äôÔπá‚äô)", "(Àá‚è†Àá)", "(Íô≥‰∫∫Íô≥)", "(^‚åí^)", "(–§‚åí–§)",
        "(ê©êÁöøê©ê)", "„ÉΩ(‚∏ÑÔπè‚∏Ö)êÉ∑", "‡ΩÄ(‚∏ÑÔ∏∑‚∏Ö)‡Ω´", "o(¬¥–¥ÔΩÄo)"
    )

    private val arrConfused = listOf(
        "(‚ÜÅ_‚ÜÅ)", "Ôºà‚ñΩ –¥‚ñΩÔºâ", "‚îê(Ôæü ÔΩûÔæü )‚îå", "(‚äô_‚óé)", "‡∞†_‡∞†", "‚óè.‚óâ", "(^^„Çû", "‡≤†_‡≤∞‡≥É", "‚ÑÉ‚ÜÇ_‚ÜÇ",
        "…æ‚óâ‚äÜ‚óâ…π", "(„ÄÇ„Éò¬∞)", "(‚äô_‚òâ)", "(ÔºæÔºæÔºõ)", "(‚òâ_‚òâ)", "(‚ô†_‚ô¶)", "(ÔæüÔΩ∞Ôæü;", "(C_C)", "‚óî_‚óî",
        "(„Çú-„Çú)", "(‚óë‚óã‚óë)", "(„Éª„ÉªÔºõ)", "‚ÅÄ‚äôÔπè‚òâ‚ÅÄ", "(„Çú„ÄÇ„Çú)", "(„Éª„Éª)", "(¬¥„Ç®ÔΩÄÔºõ)", "(‚Äò‚óá‚Äô)", "Ôºà„Éª‚à©„ÉªÔºâ",
        "(„Éª‚àß‚Äê)„Çû", "(‚äôÔºø‚äô)", "(‚óé_‚óé;)", "(‚óè__‚óè)", "(Ôæü„ÉòÔæü)", "Ÿ©‚óîÃØ‚óî€∂", "?_?", "‡∏Ö(Ÿõ‚Ä¢‡Ø∞‚Ä¢ Ÿõ )",
        "Ôºà‚óé0‚óéÔºâ·µí·µê·µç·µé·µé·µé", "(„Çú‚óá„Çú)„Çû", "(‚Äò-‚Äò*)„Çû", "(ÔæüœÅÔæü*)", "(‚Äò-‚Äô*)", "‚îå( ‚Ä¢ÃÅ ‚åÇ ‚Ä¢ÃÄ )‚îê",
        "‡ºº Õí Õì Õí‡ºΩ", "‡ºº Õí Ã∂ Õí‡ºΩ", "(> ÂõóÔºú?)", "(Ôæü–îÔæü ?)"
    )

    private val arrCryFace = listOf(
        "(‡≤• _ ñ‡≤•)", "(T–¥T)", "ÿ£‚Äøÿ£", "(-Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•·∑Ñ_-Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•Ã•·∑Ö )",
        "(ÔºõÔπèÔºõ)", "(ToT)", "(‚î≥–î‚î≥)", "(‡≤•Ôπè‡≤•)", "ÔºàÔºõ„Å∏ÔºöÔºâ", "(TÔºøT)", "ÔºàœÄ„ÉºœÄÔºâ", "(Ôº¥‚ñΩÔº¥)", "(‚ãüÔπè‚ãû)", "ÔºàÔΩâ–îÔΩâÔºâ",
        "(¬¥–î‚äÇ„ÉΩ", "(;–î;)", "Ôºà>Ôπè<Ôºâ", "‚ï•Ôπè‚ï•", "(„Å§Ôπè‚äÇ)", "‡ºº‚òØÔπè‚òØ‡ºΩ", "(„ÉéÔπè„ÉΩ)", "(„ÉéA„ÉΩ)", "(‚ï•_‚ï•)",
        "(T‚åìT)", "(‡ºé‡∫∂‚åë‡ºé‡∫∂)", "(‚òçÔπè‚Å∞)ÔΩ°", "(‡≤•_ ñ‡≤•)", "(„Å§–¥‚äÇ)", "(‚âñÕû_‚âñÃ•)", "(‡ÆáÔπè‡Æá`ÔΩ°)", "‡ºº‡≤¢_‡≤¢‡ºΩ", "‡ºº ‡ºé‡∫∂ ‡∑¥ ‡ºé‡∫∂‡ºΩ"
    )

    private val arrCuteFace = listOf(
        "‡ºº‚òØÔπè‚òØ‡ºΩ", "„ÉΩ(Õ°‚óï Õú ñ Õ°‚óï)Ôæâ", "‚ùÅ(‚óï‚Äø‚óï)‚ùÅ", "(‚óï‚Äø‚óï)", "Àö‚Çä¬∑ ÕüÕüÕûÕû(¬∫ ÃÜÃÜ¬∫)", "‚óï‚Äø‚óï", "(‚úø ‚ô•‚Äø‚ô•)", "(‚óï‚ó°‚óï)",
        "‚óï‚Äø‚óï", "‚Ä¢·¥ó‚Ä¢", "‚óè‚åí‚óè", "(‚úßœâ‚úß)", "(ÔΩ°‚ô•‚Äø‚ô•ÔΩ°)", "(‚äôÔπè‚äô)", "„ÉΩ(¬¥‚àáÔΩÄ)„Éé", "(·É¶‚ú™v‚ú™)·É¶", "·ïï( ·êõ )·ïó", "(‚ÅÑ ‚ÅÑ‚Ä¢‚ÅÑœâ‚ÅÑ‚Ä¢‚ÅÑ ‚ÅÑ)", "(‚ñ∞ÀòÔ∏πÀò‚ñ∞)", " ï‚Ä¢·¥•‚Ä¢ î", "(ÔΩ°ÔΩ•œâÔΩ•ÔΩ°)"
    )

    private val arrSmileFace = listOf(
        "(¬¥‚Ä¢ ·µï ‚Ä¢`)", "‚óù(‚ëÖ‚Ä¢·¥ó‚Ä¢‚ëÖ)‚óú", "‚ï∞(¬∞‚ñΩ¬∞)‚ïØ", "(*^œâ^*)", "(*ÀòÔ∏∂Àò*)", "(„ÄÇ-œâ-)‚ô°", "·µï ·µï", "Ôºà*Ôºæ3Ôºæ)/~‚òÜ", "(ÔΩ°‚Ä¢ÃÅÔ∏ø‚Ä¢ÃÄÔΩ°)",
        "(‚âßœâ‚â¶)", " ï‚Ä¢·¥•‚Ä¢ î", "ÔºàÔºæ_ÔºæÔºâ", "Ôºà‚åí_‚åíÔºâ", "(‚åíœâ‚åí)", "„Éæ(Ôºæ‚àáÔºæ)", "‚ï∞(¬∞‚ñΩ¬∞)‚ïØ", "(*¬¥‚àáÔΩÄ*)", "(*¬¥œâ`*)", "(·É¶‚ú™v‚ú™)·É¶",
        "(‚àó ‚ùõ ‚åì ‚ùõ ‚àó)", "ÔºàÔºæÔºçÔºæÔºâ", "( *‚åí‚àá‚åí*)", "‚óü(‚Ä¢ Œµ ‚Ä¢)‚óû", "‚úß(ÔΩ°‚ô°‚Äø‚ô°ÔΩ°)", "„ÉΩ(Ôºæ–îÔºæ)Ôæâ", "(*^‚ñΩ^*)", "„ÉΩ(Ôºæ–îÔºæ)Ôæâ", "‚ï∞(¬∞‚ñΩ¬∞)‚ïØ"
    )

    private val arrHappyFace = listOf(
        "(‚ïØ¬∞‚ñ°¬∞)‚ïØ", "(‚óï‚Äø‚óï)", "(/^-^(^ ^*)/", "(^-^)v", "(¬¥‚ñΩ` É‚ô°∆™)", "(*‚âßœâ‚â¶)", "Ôºº(Ôºæ‚ñΩÔºæ)Ôºè", "(ÔºæœâÔºæ)", "(Àò‚å£Àò)", "(o^‚ñΩ^o)",
        "(* >œâ<)", "(‚úø^‚Äø^)", "„ÉΩ(Ôºæ–îÔºæ)Ôæâ", "(*^‚ñΩ^*)", "(o^‚ñΩ^o)", "‚ï∞(¬∞‚ñΩ¬∞)‚ïØ", "(*^œâ^*)", "Ôºº(Ôºæ‚ñΩÔºæ)Ôºè", "(Ôºæ‚óá^)", "(‚åí‚ñΩ‚åí)"
    )

    private val arrMoo = listOf(
        "(ÔΩ°ÔΩ•œâÔΩ•ÔΩ°)", "(‚âß‚àá‚â¶)", "(o‚Ä¢œâ‚Ä¢o)", "(„Çù‚àÄÔΩ•)", "(„Å£‚óï‚Äø‚óï)„Å£", "‡≠ß(ÀÉ‚ó°ÀÇ)‡≠®", "(Ôø£œâÔø£)", "ÔºàÔºæŒΩÔºæÔºâ", "(*^_^*)", "Ôºº(Ôºæ‚ñΩÔºæ)Ôºè",
        "(Ôæü„ÉÆÔæü)", "(*‚âß‚ñΩ‚â¶)", "(‚òÜ‚àÄ‚òÜ)", "(¬¨‚Äø¬¨)", "(ÔΩ°‚ô•‚Äø‚ô•ÔΩ°)", "Ôºà‚ïπ‚ó°‚ïπÔºâ", "„ÉΩ(*‚åí‚àá‚åí*)Ôæâ", "(‚åí‚Äø‚åí)", "(Ôæü‚ñΩÔæü)", "o(„ÄÉÔºæ‚ñΩÔºæ„ÄÉ)o",
        "(Àò‚å£Àò)", "·ïï( ·êõ )·ïó", "(‚ô°¬¥‚àÄ`‚ô°)", "(·É¶‚ú™v‚ú™)·É¶", "ÔºàÔºæœâÔºæÔºâ", "(*>œâ<*)", "(*¬¥œâ`*)", "(*Ôºæ3Ôºæ/)", "(‚âß‚àá‚â¶)"
    )

    private val arrPlay = listOf(
        "(ÔΩ°‚Ä¢ÃÄ·¥ó-)‚úß", "‚éõ‚éù(‚úø‚ïπ‚ó°‚ïπ)‚é†‚éû", "( Ã©ÀÉÃ£Ã£Ã©(ÀÉÃ£Ã£Ã©)", "o(„ÄÉÔºæ‚ñΩÔºæ„ÄÉ)o", "‘Ö(¬ØÔπÉ¬Ø‘Ö)", "(ÔΩûÔø£‚ñΩÔø£)ÔΩû", "( Õ°¬∞ Õú ñ Õ°¬∞)", "(‚äô_‚òâ)",
        "(¬¥‚Ä¢ ·µï ‚Ä¢`)", "o(‚ï•Ôπè‚ï•)o", "(oÀò‚ó°Àòo)", "( Àò ¬≥Àò)‚ù§", "(*‚âßœâ‚â¶)", "(‡πëÀÉÃµ·¥óÀÇÃµ)Ÿà", "(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØ", "( ò‚Äø ò)", "(o‚Ä¢ÃÄ·¥ó-)‚úß", "(Ôæâ‚óï„ÉÆ‚óï)Ôæâ*:ÔΩ•Ôæü‚úß",
        "(¬¥ÔΩ°‚Ä¢ ·µï ‚Ä¢ÔΩ°`)", " ï‚Ä¢·¥•‚Ä¢ î", "(‚âß‚ó°‚â¶)", " ï‚Ä¢·¥•‚Ä¢ î", "(‚âß‚àá‚â¶)", "(ÔΩ°‚ô•‚Äø‚ô•ÔΩ°)", "(*^œâ^*)", "(‚ïπ‚ó°‚ïπ)", "Œ£(„Å£Ôæü–îÔæü)„Å£"
    )

    private val arrConfusedFace = listOf(
        "(‚äô_‚òâ)", "ÔºàÔºû‰∫∫ÔºúÔºõÔºâ", "ÔºàÀÉÃ£Ã£Ã©‚åìÀÇÃ£Ã£Ã©Ôºâ", "(‚äô_‚òâ)", "( ‚Ä¢ÃÅ ÃØ‚Ä¢ÃÄ )", "Ôºà*Ôºæ3Ôºæ)/~‚òÜ", "(„Éª_„Éª„Éæ", "Ôºà/_ÔººÔºâ", "Ôºà„Éª‚óá„ÉªÔºâ", "( ¬∞–¥¬∞)",
        "(ÔΩ°‚Ä¢ÃÅÔ∏ø‚Ä¢ÃÄÔΩ°)", "(‡≤†_‡≤†)", "Ôºà„Éª_„ÉªÔºâ", "(‚©∫_‚©π)", "o(Ôæü–îÔæü)o", "Ôºà*„Çú„Éº„Çú*Ôºâ", "(„ÄÇ„Éª_„Éª„ÄÇ)", "(„Öá_„Öá)", "Ôºà¬∞–î¬∞Ôºâ", "(/œâÔºº)"
    )

    private val arrFear = listOf(
        "(Ôæü–îÔæü)", "(ÔºõÔø£–îÔø£)", "(„ÄçÔæüÔæõÔæü)„Äç", "ÔºàÔø£‚ñ°Ôø£ÔºõÔºâ", "(Ôæü–¥Ôæü)", "(‚äô_‚òâ)", "(„Éª_„Éª)", "((( ÔºõÔæü–îÔæü)))", "(Ôºõ¬¨–¥¬¨)", "ÔºàÔºà(Ôæü–îÔæüÔºõÔºâÔºâ",
        "ÔºàÔø£„ÉºÔø£Ôºâ", "(‚Ä¢ÃÅ ÃØ‚Ä¢ÃÄ)", "Ôºà¬∞Œø¬∞Ôºâ", "Ôºà„Éª‚óá„ÉªÔºâ", "(¬¥‚Ä¢_‚Ä¢`)", "ÔºàÔºõ„Å∏ÔºöÔºâ", "Ôºà„Éª‚àÄ„ÉªÔºâ", "(‚ùõ‚Äø‚ùõ)", "Ôºà¬ØÔ∏∂¬ØÔºâ", "((( ÔºõÔæü–îÔæü)))"
    )

    private val arrOthers = listOf(
        "(‚ïØ¬∞‚ñ°¬∞)‚ïØ", "(¬¨‚Äø¬¨)", "(‚ú™‚Äø‚ú™)", "(‚âß‚àá‚â¶)", "(¬∫ ÀÉÃ£Ã£Ã©‚åìÀÇÃ£Ã£Ã©)", "( Àò ¬≥Àò)‚ù§", "(‚äô_‚òâ)", "( ¬Ø‚Ä¢¬Ø)", "(ÀòÔ∏πÀò)", " ï‚Ä¢·¥•‚Ä¢ î",
        "(ÔΩ°‚Ä¢ÃÅÔ∏ø‚Ä¢ÃÄÔΩ°)", "(‚úßœâ‚úß)", "‚úß(ÔΩ°‚ô°‚Äø‚ô°ÔΩ°)", "‚ï∞(¬∞‚ñΩ¬∞)‚ïØ", "(‚ÅÑ ‚ÅÑ‚Ä¢‚ÅÑœâ‚ÅÑ‚Ä¢‚ÅÑ ‚ÅÑ)", "(‚åê‚ñ†_‚ñ†)", "(ÔΩ°‚Ä¢ÃÅÔ∏ø‚Ä¢ÃÄÔΩ°)", "ÔºàÔø£„ÉºÔø£Ôºâ", "(/^-^(^ ^*)/", "(¬¥‚Ä¢ ·µï ‚Ä¢`)"
    )
    val arraysList = listOf(
        arrAngry,
        arrBadMood,
        arrBear,
        arrBeg,
        arrConfused,
        arrCryFace,
        arrCuteFace,
        arrSmileFace,
        arrHappyFace,
        arrMoo,
        arrPlay,
        arrConfusedFace,
        arrFear,
        arrOthers
        // Add other arrays as needed, ensuring the order matches arrMenuName
    )
    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        arrMenuName = arguments?.getStringArrayList("menuList") ?: listOf()
        val position = arguments?.getInt("position") ?: 0  // Retrieve the position

        val view = inflater.inflate(R.layout.fragment_shapes_bottom_sheet, container, false)
        /*    categoryMap = mapOf(
            arrMenuName[0] to arrAngry,
            arrMenuName[1] to arrBadMood,
            arrMenuName[2] to arrBear,
            arrMenuName[3] to arrBeg,
            // Continue mapping the rest
        )*/
        val centerTextView = view.findViewById<TextView>(R.id.center_text)
        centerTextView.text = arrMenuName[position]

        categoryMap = arrMenuName.indices.associate { index ->
            arrMenuName[index] to arraysList.getOrNull(index).orEmpty()
        }
        favoriteViewModel = ViewModelProvider(this).get(HistoryViewModel::class.java)

        val recyclershape: RecyclerView = view.findViewById(R.id.recyclerkalematwashar)
        val allItemsToShow = categoryMap.flatMap { it.value }
        val imageclose: ImageView = view.findViewById(R.id.left_image)
        imageclose.setOnClickListener {
            parentFragmentManager.beginTransaction().remove(this).commit()
        }
            val adapter = ElashkalDetailAdapter(allItemsToShow,favoriteViewModel
            ,onFavoriteClicked={
                        text->handleFavoriteClick(text)
                }, onCopyClicked = {text->handleCopyClick(text)})
            recyclershape.layoutManager = LinearLayoutManager(context)
            recyclershape.adapter = adapter

            return view
        }

    private fun handleFavoriteClick(text: String) {
        ToastUtils.showCustomToast(requireContext(),
                "ÿ™ŸÖÿ™ ÿßÿ∂ÿßŸÅÿ© ÿßŸÑÿ≤ÿÆÿ±ŸÅÿ© ÿßŸÑŸä ÿßŸÑŸÖŸÅÿ∂ŸÑÿ©")

    }
    private fun handleCopyClick(text: String) {
        val context = requireContext()

        if (CopyCountManager.updateCopyCount(context)) {
            // Perform copy logic
            val clipboard = context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
            val clip = ClipData.newPlainText("label", text)
            clipboard.setPrimaryClip(clip)

            // Get the remaining copy count
            val remainingCount = CopyCountManager.getCopyCount(context)

            // Show a custom toast with the remaining count
            DialogUtils.showCustomToast(context, "ÿ™ŸÖ ÿßŸÑŸÜÿ≥ÿÆ ŸÖÿ™ÿ®ŸÇŸä ŸÑÿØŸäŸÉ: $remainingCount")

            // If the copy limit is reached, show the reward dialog
            if (remainingCount == 0) {
                DialogUtils.showCopyLimitDialog(context, text)
            }
        } else {
            // Show the dialog when copy limit is reached
            DialogUtils.showCopyLimitDialog(context, text)
        }
    }
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        // Retrieve data from arguments and use it
      //  val selIndex = arguments?.getInt("selIndex") ?: 0
      //  val strTitle = arguments?.getString("strTitle") ?: ""

        // Use selIndex and strTitle as needed
    }
    fun getFaces(category: String): List<String>? {
        return categoryMap[category]
    }
    override fun onStart() {
        super.onStart()
        val bottomSheetDialog = dialog as BottomSheetDialog?
        bottomSheetDialog?.let {
            val bottomSheet =
                it.findViewById<View>(com.google.android.material.R.id.design_bottom_sheet)
            bottomSheet?.let { sheet ->
                val behavior = BottomSheetBehavior.from(sheet)

                // Set the initial state
                behavior.state = BottomSheetBehavior.STATE_EXPANDED

                // Add top margin (adjust this value as needed)
                val layoutParams = sheet.layoutParams as CoordinatorLayout.LayoutParams
                layoutParams.topMargin = 30 // Adjust margin value as needed
                sheet.layoutParams = layoutParams

                // Optional: Prevent collapsing beyond the desired height
                behavior.isHideable = false
                behavior.isDraggable = true
            }

        }
    }}



